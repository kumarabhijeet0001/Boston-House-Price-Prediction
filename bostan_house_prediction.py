# -*- coding: utf-8 -*-
"""Bostan House PREDICTION

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zCi277Sam-SrUHZOCKc9FGXxwoSm9YdS
"""

# Import necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

df=pd.read_csv("/content/BostonHousing.csv")

df.head(5)

"""Features (Columns):
CRIM: Crime rate (per capita) in the area.
ZN: Proportion of residential land zoned for large plots.
INDUS: Proportion of non-retail business acres per town.
CHAS: Charles River dummy variable (1 if tract bounds river; 0 otherwise).
NOX: Nitrogen oxide concentration (parts per 10 million).
RM: Average number of rooms per dwelling.
AGE: Proportion of owner-occupied units built before 1940.
DIS: Weighted distance to employment centers.
RAD: Index of accessibility to radial highways.
TAX: Property tax rate (per $10,000).
PTRATIO: Pupil-teacher ratio by town.
B: Proportion of Black residents in the area.
LSTAT: Percentage of lower status population.
Target Variable:
MEDV: Median value of owner-occupied homes in thousands of dollars."""

np.shape(df)

df.info()

df.dropna(inplace=True)
df.info()

df.describe()

df.isnull().sum()

# Visualize the correlation between features
plt.figure(figsize=(12, 8))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm', fmt='.2f')
plt.title('Correlation Matrix')
plt.show()

# Features (independent variables)
X = df.drop('medv', axis=1)

# Target (dependent variable)
y = df['medv']

# Split the data into training and testing sets (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Linear Regression model
model = LinearRegression()

# Train the model using the training data
model.fit(X_train, y_train)

# Predict the target variable (house prices) on the test data
y_pred = model.predict(X_test)

# Evaluate the model using Mean Squared Error (MSE)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)

# Evaluate the model using R-squared (R²)
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error (MSE): {mse}')
print(f'Root Mean Squared Error (RMSE): {rmse}')
print(f'R-squared (R²): {r2}')

# Plot actual vs predicted values
plt.figure(figsize=(8, 6))
plt.scatter(y_test, y_pred, color='blue', edgecolor='black')
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', lw=2)
plt.title('Actual vs Predicted House Prices')
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')
plt.show()